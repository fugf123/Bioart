<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.xiaowa</groupId>
    <artifactId>bioart</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <packaging>jar</packaging>

    <name>bioart</name>
    <description>BioArt for Spring Boot</description>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.1.0.RELEASE</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <java.version>1.8</java.version>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-amqp</artifactId>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>
        <!--用于Web应用-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-logging</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <!--&lt;!&ndash;SpringBoot内置Tomcat，可用于在无外部Servelet容器的情况下直接运行应用，在IDE中调试应用时也需要&ndash;&gt;-->
        <!--<dependency>-->
        <!--<groupId>org.springframework.boot</groupId>-->
        <!--<artifactId>spring-boot-starter-tomcat</artifactId>-->
        <!--&lt;!&ndash;设置为provided，可使打包后的应用能发布到其它Servlet容器中&ndash;&gt;-->
        <!--<scope>provided</scope>-->
        <!--</dependency>-->

        <!--SpringBoot开发工具，可用于在IDE中调试应用（DEBUG）-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <optional>true</optional>
            <scope>provided</scope>
        </dependency>

        <!--SpringBoot配置处理器（作用暂不明确，但可能也是必需的）-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-configuration-processor</artifactId>
            <!--设置为optional，发布时不需要-->
            <optional>true</optional>
        </dependency>

        <!--SpringBootAOP处理器，使用AOP功能时是必需的-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-aop</artifactId>
        </dependency>

        <!--SpringBootTest模块，想要使用JUnit做单元测试时是必需的-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
        </dependency>

        <!--阿里连接池，据说性能等各方面比内置的连接池要好-->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>druid</artifactId>
            <version>1.1.9</version>
        </dependency>

        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>druid-spring-boot-starter</artifactId>
            <version>1.1.9</version>
        </dependency>

        <!--MyBaits持久层-->
        <dependency>
            <groupId>org.mybatis.spring.boot</groupId>
            <artifactId>mybatis-spring-boot-starter</artifactId>
            <version>1.3.2</version>
        </dependency>

        <!--MyBatis通用Mapper-->
        <dependency>
            <groupId>tk.mybatis</groupId>
            <artifactId>mapper-spring-boot-starter</artifactId>
            <version>1.1.5</version>
        </dependency>

        <!--<dependency>-->
            <!--<groupId>com.baomidou</groupId>-->
            <!--<artifactId>mybatis-plus-boot-starter</artifactId>-->
            <!--<version>3.0.5</version>-->
        <!--</dependency>-->


        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>3.4</version>
        </dependency>

        <!--用于数据库连接-->
        <!--<dependency>-->
        <!--<groupId>org.springframework.boot</groupId>-->
        <!--<artifactId>spring-boot-starter-data-jpa</artifactId>-->
        <!--</dependency>-->

        <!--配合MyBatis使用的数据分页辅助工具-->
        <dependency>
            <groupId>com.github.pagehelper</groupId>
            <artifactId>pagehelper-spring-boot-starter</artifactId>
            <version>1.2.3</version>
        </dependency>
        <!--SpringBoot依赖end-->

        <!--JSON序列化与反序列化功能-->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>1.2.24</version>
        </dependency>

        <!--ApacheCommonFileUpload，用来处理文件上传请求-->
        <dependency>
            <groupId>commons-fileupload</groupId>
            <artifactId>commons-fileupload</artifactId>
            <version>1.2.2</version>
        </dependency>

        <!--ApacheHttpClient 使用HTTP协议以客户端身份与其它HTTP服务器通讯并交换数据-->
        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpclient</artifactId>
            <version>4.5.3</version>
        </dependency>

        <!--ApachePOI 主要用来导入Excel文件-->
        <dependency>
            <groupId>org.apache.poi</groupId>
            <artifactId>poi</artifactId>
            <version>3.16</version>
        </dependency>

        <!--ApacheAxis1.4 用来以客户端的身份访问ApacheAxis1.4编写的WebService接口-->
        <dependency>
            <groupId>axis</groupId>
            <artifactId>axis</artifactId>
            <version>1.4</version>
        </dependency>

        <!--Java绘图工具-->
        <dependency>
            <groupId>batik</groupId>
            <artifactId>batik-transcoder</artifactId>
            <version>1.6-1</version>
        </dependency>

        <!--生成缩略图的工具-->
        <dependency>
            <groupId>net.coobird</groupId>
            <artifactId>thumbnailator</artifactId>
            <version>0.4.8</version>
        </dependency>

        <!--URLEncode和Decode工具，这个其实可以用JDK中的API代替-->
        <dependency>
            <groupId>com.github.tasubo</groupId>
            <artifactId>jurl-tools</artifactId>
            <version>0.7</version>
        </dependency>

        <dependency>
            <groupId>com.itextpdf</groupId>
            <artifactId>itextpdf</artifactId>
            <version>5.5.12</version>
        </dependency>

        <dependency>
            <groupId>org.xhtmlrenderer</groupId>
            <artifactId>flying-saucer-pdf-itext5</artifactId>
            <version>9.1.6</version>
        </dependency>
        <!-- log4j日志 -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>1.7.21</version>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-log4j12</artifactId>
            <version>1.7.21</version>
        </dependency>
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
        </dependency>
        <!--中文转拼音工具-->
        <dependency>
            <groupId>com.belerweb</groupId>
            <artifactId>pinyin4j</artifactId>
            <version>2.5.1</version>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <!--方式二热部署-只能热部署已经存在的文件方法不能热部署新添加的方法文件-->
                <!--<<dependencies>
                    <dependency>
                        <groupId>org.springframework</groupId>
                        <artifactId>springloaded</artifactId>
                        <version>1.2.6.RELEASE</version>
                    </dependency>
                </dependencies>-->
                <configuration>
                    <fork>true</fork>
                </configuration>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                        <configuration>
                            <skip>true</skip>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- mybatis generator 自动生成代码插件 -->
            <plugin>
                <groupId>org.mybatis.generator</groupId>
                <artifactId>mybatis-generator-maven-plugin</artifactId>
                <version>1.3.5</version>

                <configuration>
                    <configurationFile>${basedir}/src/main/resources/generatorConfig.xml</configurationFile>
                    <verbose>true</verbose>
                    <overwrite>true</overwrite>
                </configuration>
                <dependencies>
                    <!--<dependency>-->
                        <!--<groupId>mysql</groupId>-->
                        <!--<artifactId>mysql-connector-java</artifactId>-->
                    <!--</dependency>-->
                    <!--生成文件时所使用的通用Mapper-->
                    <dependency>
                        <groupId>tk.mybatis</groupId>
                        <artifactId>mapper</artifactId>
                        <version>3.4.5</version>
                    </dependency>
                </dependencies>
            </plugin>

            <!--编译器插件-->
            <!--<plugin>-->
                <!--<groupId>org.apache.maven.plugins</groupId>-->
                <!--<artifactId>maven-compiler-plugin</artifactId>-->
                <!--<version>3.7.0</version>-->
                <!--<configuration>-->
                    <!--&lt;!&ndash;指定源代码文件的编码格式&ndash;&gt;-->
                    <!--<encoding>GBK</encoding>-->
                    <!--&lt;!&ndash;指定源代码的JDK版本&ndash;&gt;-->
                    <!--<source>1.8</source>-->
                    <!--&lt;!&ndash;指定目标JDK版本&ndash;&gt;-->
                    <!--<target>1.8</target>-->
                <!--</configuration>-->
            <!--</plugin>-->

            <!--WAR打包插件，用于将WEB应用打包为war文件。通常建议通过LifeCycle中的package来执行打包，而不要直接执行
                      插件的war功能，因为LifeCycle中的package会自动完成编译等一系列必要的动作-->
            <!--<plugin>-->
            <!--<groupId>org.apache.maven.plugins</groupId>-->
            <!--<artifactId>maven-war-plugin</artifactId>-->
            <!--<version>3.2.0</version>-->
            <!--<configuration>-->
            <!--&lt;!&ndash;<failOnMissingWebXml>false</failOnMissingWebXml>&ndash;&gt;-->
            <!--<archive>-->
            <!--&lt;!&ndash;不要打包Maven配置文件&ndash;&gt;-->
            <!--<addMavenDescriptor>false</addMavenDescriptor>-->
            <!--</archive>-->
            <!--&lt;!&ndash;向war包引入额外的文件，可引入额外的jar包，可根据不同的profile引入不同的配置文件&ndash;&gt;-->
            <!--<webResources>-->
            <!--<resource>-->
            <!--&lt;!&ndash;要引入的额外文件的所在目录，可使用相对路径或绝对路径，-->
            <!--使用相对路径时，默认根目录为POM文件所在目录&ndash;&gt;-->
            <!--<directory>${csjcclib.path}</directory>-->
            <!--&lt;!&ndash;要把额外文件引入到war包的哪个位置，默认为根目录&ndash;&gt;-->
            <!--<targetPath>WEB-INF/lib</targetPath>-->
            <!--&lt;!&ndash;要引入哪些文件，默认为directory下所有的目录和文件&ndash;&gt;-->
            <!--<includes>-->
            <!--<include>*.jar</include>-->
            <!--</includes>-->
            <!--&lt;!&ndash;是否启用过滤。对于文本文件，如果想在打包时把文件中引用的变量替换为实际的变量值，则必须-->
            <!--启用，否则插件仅仅是拷贝文件，而不会去做替换；对于二进制文件则应当关闭&ndash;&gt;-->
            <!--<filtering>false</filtering>-->
            <!--</resource>-->
            <!--<resource>-->
            <!--<directory>${csjmwlib.path}</directory>-->
            <!--<targetPath>WEB-INF/lib</targetPath>-->
            <!--<includes>-->
            <!--<include>*.jar</include>-->
            <!--</includes>-->
            <!--<filtering>false</filtering>-->
            <!--</resource>-->
            <!--<resource>-->
            <!--<directory>resources-common</directory>-->
            <!--<targetPath>WEB-INF/classes</targetPath>-->
            <!--<filtering>true</filtering>-->
            <!--</resource>-->
            <!--<resource>-->
            <!--<directory>resources-${extraResDirExt}</directory>-->
            <!--<targetPath>WEB-INF/classes</targetPath>-->
            <!--<filtering>true</filtering>-->
            <!--</resource>-->
            <!--</webResources>-->
            <!--&lt;!&ndash;从war包中排除指定的目录或文件&ndash;&gt;-->
            <!--<packagingExcludes>-->
            <!--WEB-INF/classes/com/hesu/test/,-->
            <!--WEB-INF/classes/generatorConfig.xml-->
            <!--</packagingExcludes>-->
            <!--&lt;!&ndash;-=&ndash;&gt;-->
            <!--&lt;!&ndash;要生成的war包名称（不带后缀名）&ndash;&gt;-->
            <!--<warName>bpaims6</warName>-->
            <!--</configuration>-->
            <!--</plugin>-->
        </plugins>
    </build>
    <!--自定义maven库-->
    <repositories>
        <repository>
            <id>aliyun</id>
            <name>aliyun Repository</name>
            <url>http://maven.aliyun.com/nexus/content/groups/public/</url>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </repository>
    </repositories>
</project>
